---
title: "Geographic detectors(geodetector) Model in R package spEcula"
author: "Wenbo Lv"
vignette: >
  %\VignetteIndexEntry{Geographi-detector}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "##",
  warning = FALSE,
  message = FALSE
)
```

This vignette explains how to run a `geodetector` model in `spEcula` package.

```{r echo=FALSE, out.width='75%', fig.align="center",fig.cap="Schematic overview of Geographic detectors(geodetector) model"}
knitr::include_graphics('../man/figures/gd_flowchart.png')
```

## basical geographic detector

### Load package and pre-processing data.

```{r setup}
library(sf)
library(tidyverse)
library(spEcula)
```

See layers in `NTDs.gpkg`:

```{r}
ntdspath = system.file("extdata", "NTDs.gpkg",package = 'spEcula')
st_layers(ntdspath)
```

In `NTDs.gpkg`, disease is a dependent variable, which is a continuous numerical variable, while others are independent and discrete variables.

Now we need to put these layers together:

```{r}
watershed = read_sf(ntdspath,layer = 'watershed')
elevation = read_sf(ntdspath,layer = 'elevation')
soiltype = read_sf(ntdspath,layer = 'soiltype')
disease = read_sf(ntdspath,layer = 'disease')
```

Plot them together:

```{r NTDs_map,fig.width=8.5,fig.height=7}
library(cowplot)

f1 = ggplot(data = disease) +
  geom_sf(aes(fill = incidence),lwd = .1,color = 'grey') +
  viridis::scale_fill_viridis(option="mako", direction = -1) +
  theme_bw() +
  theme(
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    axis.title = element_blank(),
    panel.grid = element_blank(),
    legend.position = 'inside',
    legend.position.inside = c(.1,.25),
    legend.background = element_rect(fill = 'transparent',color = NA)
  )
f2 = ggplot(data = watershed) +
  geom_sf(aes(fill = watershed),lwd = .1,color = 'grey') +
  tidyterra::scale_fill_whitebox_c() +
  coord_sf(crs = NULL) +
  theme_bw() +
  theme(
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    axis.title = element_blank(),
    panel.grid = element_blank(),
    legend.position = 'inside',
    legend.position.inside = c(.1,.25),
    legend.background = element_rect(fill = 'transparent',color = NA)
  )
f3 = ggplot(data = elevation) +
  geom_sf(aes(fill = elevation),lwd = .1,color = 'grey') +
  tidyterra::scale_fill_hypso_c() +
  theme_bw() +
  theme(
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    axis.title = element_blank(),
    panel.grid = element_blank(),
    legend.position = 'inside',
    legend.position.inside = c(.1,.25),
    legend.background = element_rect(fill = 'transparent',color = NA)
  )
f4 = ggplot(data = soiltype) +
  geom_sf(aes(fill = soiltype),lwd = .1,color = 'grey') +
  tidyterra::scale_fill_wiki_c() +
  theme_bw() +
  theme(
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    axis.title = element_blank(),
    panel.grid = element_blank(),
    legend.position = 'inside',
    legend.position.inside = c(.1,.25),
    legend.background = element_rect(fill = 'transparent',color = NA)
  )

plot_grid(f1,f2,f3,f4, nrow = 2,label_fontfamily = 'serif',
          labels = paste0('(',letters[1:4],')'),
          label_fontface = 'plain',label_size = 10,
          hjust = -1.5,align = 'hv')  -> p
p
```

Attribute spatial join

```{r}
NTDs = disease %>%
  st_centroid() %>%
  st_join(watershed[,"watershed"]) %>%
  st_join(elevation[,"elevation"]) %>%
  st_join(soiltype[,"soiltype"])
```

Check whether has `NA` in `NTDs`:

```{r}
NTDs %>%
  dplyr::filter(if_any(everything(),~is.na(.x)))
```

```{r}
NTDs %>%
  dplyr::filter(if_all(everything(),~!is.na(.x))) -> NTDs
```

### Factor detector

```{r}
NTDs = st_drop_geometry(NTDs)
fd = ssh.test(incidence ~ watershed + elevation + soiltype,
              data = NTDs,type = 'factor')
fd
```

### Interaction detector

```{r}
id = ssh.test(incidence ~ watershed + elevation + soiltype,
              data = NTDs,type = 'interaction')
id
```

### Risk detector

```{r}
rd = ssh.test(incidence ~ watershed + elevation + soiltype,
              data = NTDs,type = 'risk')
rd
```

You can change the significant interval by assign `alpha` argument,the default value of `alpha` argument is `0.95`.

```{r}
rd99 = ssh.test(incidence ~ watershed + elevation + soiltype,
              data = NTDs,type = 'risk',alpha = 0.99)
rd99
```

### Ecological detector

```{r}
ed = ssh.test(incidence ~ watershed + elevation + soiltype,
              data = NTDs,type = 'ecological')
ed
```

You can also change the significant interval by assign `alpha` argument,the default value of `alpha` argument is `0.95`.

```{r}
ed99 = ssh.test(incidence ~ watershed + elevation + soiltype,
              data = NTDs,type = 'ecological',alpha = 0.99)
ed99
```

## optimal parameters geographic detector

```{r}
library(terra)
fvcpath = system.file("extdata", "FVC.zip",package = 'spEcula')
fvc = terra::rast(paste0("/vsizip/",fvcpath))
fvc
names(fvc)
```

### Convert data from `SpatRaster` to `tiibble`

```{r}
fvc = as_tibble(terra::as.data.frame(fvc,na.rm = T))
head(fvc)
```

### Determine optimal discretization parameters

Only `lulc` is a discrete category variable in the `fvc` data, we need to discretize others.
We can use `gd_bestunidisc` to discretize them based on geodetector q-statistic.

```{r}
tictoc::tic()
g = gd_bestunidisc(fvc ~ .,data = select(fvc,-lulc),discnum = 2:15,cores = 6)
tictoc::toc()
```

```{r}
g
new.fvc = g$disv
new.fvc
```

The `new.fvc`  is the discrete result of the optimal discretization parameter based on the Q statistic of the geographic detector,we can combine it with `fvc` and `lulc` col in `fvc` tibble now.

```{r}
new.fvc = bind_cols(select(fvc,fvc,lulc),new.fvc)
new.fvc
```

### Run geodetector
Then ,we can run geodetector model by `ssh.test()` function.

```{r}
ssh.test(fvc ~ .,data = new.fvc,type = 'factor')
ssh.test(fvc ~ .,data = new.fvc,type = 'interaction')
```
